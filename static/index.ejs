<!DOCTYPE html>
<html>
<!--
  Turn Table Server.
-->
<head>
  <meta charset="utf-8">
  <title>Turn Table Server</title>
  <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Droid Sans">
  <link rel="stylesheet" type="text/css" href="/Style/Style.css">
</head>
<body onload="loginUser()">
  <h1>Turn Table Server</h1>
  <div id="Login">
  	<p>Enter Your ID:</p>
	<form name="idform" action="javascript:void(0);" onsubmit="return onLoggedIn();">
	<input type="text" id="iduser" name="iduser" value="1:644850560"/>
	<input type="submit" id="idsubmit" name="idsubmit" value="Login!"/>
	</form>
  </div>
  <div id="Users">
  	<p>List of Users</p>
	No Users Found.
  </div>
  <div id="Games">
  	<p>List of Games</p>
	No Games Found.
  </div>
  <script>
    var module = false;
  </script>
  <script src="/Scripts/WebSocketClient.js" type="text/javascript" charset="utf-8"></script>
  <script src="/Scripts/List.js" type="text/javascript" charset="utf-8"></script>
  <script src="/Scripts/CRC32.js" type="text/javascript" charset="utf-8"></script>
  <script src="/Scripts/Shard.js" type="text/javascript" charset="utf-8"></script>
  <script>
    var userId = null;
    var client = null;
    var gameId = "CStrike";
    var gclient = null;
    var socksConnected = 0;
    var gameMsgInterval = -1;

    function loginUser() {
	var div;
        userId = null;
        div = document.getElementById("Login");
	if(div)
		div.style.visibility = "visible";
        div = document.getElementById("Users");
	if(div)
		div.style.visibility = "hidden";
        div = document.getElementById("Games");
	if(div)
		div.style.visibility = "hidden";
    }

    function onGameData() {
	
    }

    function logoutUser() {
	--socksConnected;
	if(socksConnected > 0) 
		return;
        userId = null;
	if(client != null) {
		client.close();
	}
	loginUser();
	gameId = null;
	if(gclient != null) {
		gclient.close();
	}
	gclient = null;
	socksConnected = 0;
	if(gameMsgInterval > 0) clearInterval(gameMsgInterval);
    }

    function getFriends(userId) {
	if(userId == "1:644850560") {
		return [ "1:123", "1:345" ];
	}
	if(userId == "1:123") {
		return [ "1:345", "1:644850560"];
	}
	if(userId == "1:345") {
		return [ "1:123", "1:644850560"];
	}
	return [];
    }

    function onConnected() {
	if(socksConnected == 0) {
		++socksConnected;
		return;
	} else {
		++socksConnected;
	}
        div = document.getElementById("Login");
	if(div)
		div.style.visibility = "hidden";
        div = document.getElementById("Users");
	if(div)
		div.style.visibility = "visible";
        div = document.getElementById("Games");
	if(div)
		div.style.visibility = "visible";
	client.handleWebSocketSend({command: "idme", data: userId});
	client.registerCallback("there", onUsers);
	client.handleWebSocketSend({command: "whothere", data: {}});
	client.handleWebSocketSend({command: "subscribe", data: getFriends(userId)});
	gclient.handleWebSocketSend({command: "joingame", data: { channel: gameId, invite: getFriends(userId) }});
	gameMsgInterval = setInterval(function(){sendGame();},1000);
    }
   
    function sendGame() {
	gclient.handleWebSocketSend({command: "game", data: {channel: gameId, actions:[{user: userId, move:"test"}]}});
    } 
 
    function onDisconnected() {
	logoutUser();
    }

    function onUsers(data) {
        div = document.getElementById("Users");
	if(div) {
		var users;
		if(data)
			for(userid in data) {
				if(data.hasOwnProperty(userid)) {
					if(!users)
						users = "These Users are Present: ";
					else
						users += ",";
					users += "<b>"+data[userid]+"</b>";
				}
			}
		div.innerHTML = users;
	}
    }
 
    function onInvite(data) {
	console.log("Got Invited to: %o", data);	
    }

    function onGame(data) {
	console.log("Game Data: %o", data);	
    }

    function onLoggedIn() {
	userIdInput = document.getElementById("iduser");
	if(!userIdInput)
		return;
	userId = userIdInput.value;
	connectServer();
    }

    function connectServer() {
    	var userServer = getServer(userId, UserServers);
    	client = new WebSocketClient();
	client.registerCallback("Open", onConnected);
	client.registerCallback("Close", onDisconnected);
	client.registerCallback("invite", onInvite);
    	client.connect(userServer);
	var gameServer = getServer(gameId, GameServers);
	gclient = new WebSocketClient();
	gclient.registerCallback("Open", onConnected);
	gclient.registerCallback("game", onGame);
	gclient.registerCallback("Close", onDisconnected);
	gclient.connect(gameServer);
    }
  </script>
</body>
</html>
